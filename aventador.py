#!/usr/bin/python3
import requests
from termcolor import colored

import warnings
warnings.filterwarnings(action='ignore', module='paramiko\.*')

import paramiko

smart_user = False

while smart_user == False:
    host = input("Enter IP Address: ")
    #print(type(host))
    port = int(input("Enter SSH Port: "))
    
    user = input("Enter Username: ")
    #print(type(user))
    passw = input("Enter Password: ")
    #print(type(passw))
    
    #not sure how to one line this
    #print(colored("IP Address: ", 'red', attrs=['bold'] + list(host) + '\n' + "SSH Port: " + list(port) + '\n' + "Username: " + list(user) + '\n' + "Password: " + list(passw) + '\n'))
    
    print(colored("IP Address: ", 'red', attrs=['bold']))
    print(host)
    
    print(colored("SSH Port: ", 'red', attrs=['bold']))
    print(port)

    print(colored("Username: ", 'red', attrs=['bold']))
    print(user)

    print(colored("Password: ", 'red', attrs=['bold']))
    print(passw)

    user_choice = input("Does this all look good?: (Y/N) ")
    user_choice = user_choice.upper()
    if user_choice == "Y" or user_choice == "Yes":
        smart_user = True
    

def geo_lookup():
    #debugging
    #print(type(host.split(".")[0]))
    #print(type(host))
    #private ip validation checks to skip if private
    if host.split(".")[0] == '192' and host.split(".")[1] == '168' or host.split(".")[0] == '10' or host.split(".")[0] == '172' and host.split(".")[1] >= '16' and host.split(".")[1] <= '32' or host.split(".")[0] == '127':
        print("Provided target is a private address...skipping: ")
    else:
        print("Geo Lookup for target IP Address")
        r = requests.get('https://ipinfo.io/' + host)
        #uncomment for debugging purposes
        #print(r.status_code)
        print(r.text + '\n')



def do_survey():
    ssh = paramiko.SSHClient()
    ssh.load_system_host_keys()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(host, port, timeout=5, username=user, password=passw)

    #stdin, stdout, stderr = ssh.exec_command("unset HISTFILE")
    #print("HISTFILE unset")
    #for line in stdout.readlines():
    #    print(line.strip('\n'))

    stdin, stdout, stderr = ssh.exec_command("date; date -u")
    print(colored("dates", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))

    stdin, stdout, stderr = ssh.exec_command("unset SSH_CONNECTION")
    print(colored("SSH_CONNECTION unset", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))
    
    stdin, stdout, stderr = ssh.exec_command("whoami; id; pwd")
    print(colored("whoami, where am i, permissions", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))

    stdin, stdout, stderr = ssh.exec_command("uptime")
    print(colored("uptime", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))

    stdin, stdout, stderr = ssh.exec_command("uname -a")
    print(colored("kernel information", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))

    stdin, stdout, stderr = ssh.exec_command("arp -a; ip a || ifconfig")
    print(colored("interfaces, neighbors", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))


    stdin, stdout, stderr = ssh.exec_command("ls -lartF / /var/tmp /bin/ sbin /usr/bin /usr/sbin")
    print(colored("Finds...", 'red', attrs=['bold']))
    for line in stdout.readlines():
        print(line.strip('\n'))

    
    #malware checks
    
    
    
    
    
    
    
        
    
geo_lookup()
do_survey()

#todo 
#ssh tunnels
#persistence
#file transfers
